#version 450

const float pi = 3.14159265359;

#include "noise.glsl"

struct GrassInstanceData {
	vec3 	position;
	float 	rotation;
	vec2 	field_uv;
	float 	height;
	float 	width;
	vec3 	test_color;
	float 	bend;
	vec2 	facing;
	vec2 	type_index; // only x
};

layout (local_size_x = 16, local_size_y = 16, local_size_z = 1) in;

// per "frame"
layout(set = 0, binding = 0) uniform World {
	vec2 placement_texcoord_scale;
	vec2 placement_texcoord_offset;

	float world_seed;
	float world_to_grid_scale;
	float terrain_z_scale;
	float terrain_z_offset;
};
layout(set = 0, binding = 1) uniform sampler2D placement_texture;

const int GRASS_TYPES_SET = 1;
#include "grass_types.glsl"

// "material"
layout(set = 2, binding = 0) uniform INPUT {
	// Todo(Leo): get this from placement map
	// x: type index
	vec4 type_index;

	// xy: chunk min corner position xy
	// z: chunk size xy (Todo(Leo): constant?)
	// w: grass blades in chunk 1D (Todo(Leo): constant?)
	vec4 chunk_params;
};

// output
layout (set = 3, binding = 0) buffer OUTPUT {
	GrassInstanceData instances [];
};

float sample_height (float x, float y) {
	// transform to grid scale
	x /= world_to_grid_scale;
	y /= world_to_grid_scale;

	float noise = value_noise_2D(x, y, int(world_seed)) * 2 - 1;
	return noise * terrain_z_scale + terrain_z_offset;
}

void main() {
	uint index = gl_GlobalInvocationID.x + 
				uint(chunk_params.w) * gl_GlobalInvocationID.y;
	uint cell_x = gl_GlobalInvocationID.x;
	uint cell_y = gl_GlobalInvocationID.y;

	// Todo(Leo): make hash based on base position, not index, to not swap hash when
	// blending lods
	uint hash = hash_make(int(index));
	uint hx = hash_eat(hash, int(cell_x));
	uint hy = hash_eat(hash, int(cell_y));

	vec2 cell_size = chunk_params.zz / chunk_params.w;

	// World space!

	// base position before clumping. clumping moves this, so z component is found after that
	vec3 position_WS = vec3(
		chunk_params.x + (cell_x + hash_get_float(hx)) * cell_size.x,
		chunk_params.y + (cell_y + hash_get_float(hy)) * cell_size.y,
		0
	);

	// Eat some prime numbers to get variation, quite arbitrary, and could do without
	// float h_noise = sample_height(x * 3, y * 3) / noise_params.z;
	float h = types[int(type_index.x)].base_height + 
		types[int(type_index.x)].height_variation * (hash_get_float(hash_eat(hash, 13)));
	float r = hash_get_float(hash_eat(hash, 37)) * 2 * pi;


	// test voronoi hashing
	float clump_cell_size = types[int(type_index.x)].clump_size;
	int vx = int(floor(position_WS.x / clump_cell_size));
	int vy = int(floor(position_WS.y / clump_cell_size));

	vec2 pos = position_WS.xy;

	ivec2 closest_cell;
	vec2 closest_position;
	float closest_distance = 10000;
	for (int i = 0; i < 9; i += 1) {

		int xx = vx + (i % 3) - 1;
		int yy = vy + (i / 3) - 1;

		vec2 vpos = (vec2(xx, yy) + random_vec2(ivec2(xx, yy))) * clump_cell_size;

		float distance = length(vpos - pos);
		if (distance < closest_distance) {
			closest_distance = distance;
			closest_cell = ivec2(xx, yy);
			closest_position = vpos;
		}
	}
	uint clump_hash 	= hash_eat(hash_make(closest_cell.x), closest_cell.y);
	float extra_height 	= pow(hash_get_float(clump_hash), 3) *
							types[int(type_index.x)].clump_height_variation;

	vec3 clump_position = vec3(closest_position, sample_height(
								closest_position.x, 
								closest_position.y
							));
	vec3 to_clump 		= clump_position - position_WS;
	position_WS 			= position_WS + to_clump * types[int(type_index.x)].clump_squeeze_in;
	position_WS.z 			= sample_height(position_WS.x, position_WS.y);

	// scale and offset are in world units, and the end must be in texcoord units
	// ([0,1] and wrapping) so add offset first, scale then. Also scale is used to
	// divide as it is essentially a normalizing factor.
	// Todo(Leo): make a function of this in the common shader files once we get those.
	vec2 uv = (position_WS.xy + placement_texcoord_offset) / placement_texcoord_scale;


	// Todo(Leo): ideally we would like this to be early as possible (or would we?
	// this is a shader after all) but we need uv for this, and uv must be computed
	// after clumping. This could be compromised and just use the unclumped position
	// for uv though.
	// Todo(Leo): this piece of code is supposed to remove unplaceable grass blades
	// but for now we just scale them to zero. Please fix if possible.
	float placement_value = textureLod(placement_texture, uv, 0).r;
	if (placement_value < 0.5) {
		instances[index].position = vec3(0);
		instances[index].width = 0;
		instances[index].height = 0;
		return;
	}



	instances[index].position 	= position_WS;
	instances[index].test_color = random_color(closest_cell.x + 2000 * closest_cell.y);
	instances[index].field_uv 	= uv;
	instances[index].height 	= h + extra_height;
	instances[index].width 		= types[int(type_index.x)].width;
	instances[index].bend 		= types[int(type_index.x)].bend;
	instances[index].facing 	= vec2(-sin(r), cos(r));

	instances[index].type_index.x = type_index.x;
}